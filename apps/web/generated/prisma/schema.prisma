// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../apps/web/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Session Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  phone         String?
  password      String? // For email/password auth
  avatar        String?
  role          String    @default("CUSTOMER")
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Business relations
  orders    Order[]
  cart      CartItem[]
  addresses Address[]

  @@map("users")
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String  @default("Kenya")
  isDefault  Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Product Catalog
model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  image       String?

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  image       String
  images      String   @default("") // Comma-separated image URLs
  categoryId  String
  brand       String?
  inStock     Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category         @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductVariant {
  id             String  @id @default(uuid())
  productId      String
  name           String // e.g., "1kg", "500g", "2kg"
  weight         String // e.g., "1kg", "500g"
  price          Int // Price in cents
  compareAtPrice Int? // Original price for discounts
  sku            String? @unique
  inStock        Boolean @default(true)
  inventory      Int     @default(0)

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

// Shopping Cart
model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  variantId String
  quantity  Int    @default(1)

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@map("cart_items")
}

// Order Management
model Order {
  id          String  @id @default(uuid())
  userId      String?
  email       String
  phone       String?
  status      String  @default("PENDING")
  total       Int // Total in cents
  subtotal    Int // Subtotal in cents
  deliveryFee Int     @default(0)
  tax         Int     @default(0)
  currency    String  @default("KES")

  // Delivery Information
  deliveryLocation  String
  deliveryAddress   String // JSON string of address object
  estimatedDelivery DateTime?

  // Payment Information
  paymentMethod String
  paymentStatus String    @default("PENDING")
  paymentId     String?
  paidAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?       @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  price     Int // Price at time of order

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id       String @id @default(uuid())
  orderId  String
  method   String
  status   String @default("PENDING")
  amount   Int // Amount in cents
  currency String @default("KES")

  // M-Pesa specific fields
  mpesaCode     String? // M-Pesa transaction code
  mpesaPhone    String? // Phone number used for M-Pesa
  paybillNumber String? // Our paybill number
  accountRef    String? // Account reference for paybill

  // Safaricom Paybill specific fields
  paybillConfirmation String? // Paybill confirmation code
  paybillReference    String? // Reference number for paybill payment

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  expiresAt   DateTime?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Payment Webhook Tracking
model PaymentWebhook {
  id          String    @id @default(uuid())
  paymentId   String?
  provider    String // "mpesa", "safaricom_paybill", or "bitcoin_wallet"
  eventType   String // "payment_received", "payment_confirmed", etc.
  payload     String // JSON string of webhook payload
  processed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@map("payment_webhooks")
}

// Note: Using strings instead of enums for SQLite compatibility
// Valid values:
// Role: "CUSTOMER", "ADMIN", "MANAGER"
// OrderStatus: "PENDING", "CONFIRMED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED", "REFUNDED", "PAID"
// PaymentStatus: "PENDING", "COMPLETED", "FAILED", "REFUNDED"
// PaymentMethod: "MPESA", "SAFARICOM_PAYBILL", "BITCOIN_WALLET", "CASH_ON_DELIVERY"
