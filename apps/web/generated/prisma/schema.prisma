// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../apps/web/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  phone     String?
  avatar    String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cart      CartItem[]
  addresses Address[]

  @@map("users")
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String  @default("Kenya")
  isDefault  Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Product Catalog
model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String?
  image       String?

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  image       String
  images      String[] @default([])
  categoryId  String
  brand       String?
  inStock     Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category         @relation(fields: [categoryId], references: [id])
  variants   ProductVariant[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductVariant {
  id             String  @id @default(uuid())
  productId      String
  name           String // e.g., "1kg", "500g", "2kg"
  weight         String // e.g., "1kg", "500g"
  price          Int // Price in cents
  compareAtPrice Int? // Original price for discounts
  sku            String? @unique
  inStock        Boolean @default(true)
  inventory      Int     @default(0)

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

// Shopping Cart
model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  variantId String
  quantity  Int    @default(1)

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, variantId])
  @@map("cart_items")
}

// Order Management
model Order {
  id          String      @id @default(uuid())
  userId      String?
  email       String
  phone       String?
  status      OrderStatus @default(PENDING)
  total       Int // Total in cents
  subtotal    Int // Subtotal in cents
  deliveryFee Int         @default(0)
  tax         Int         @default(0)
  currency    String      @default("KES")

  // Delivery Information
  deliveryLocation  String
  deliveryAddress   Json // Full address object
  estimatedDelivery DateTime?

  // Payment Information
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  paidAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?       @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  variantId String
  quantity  Int
  price     Int // Price at time of order

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Payment Management
model Payment {
  id          String        @id @default(uuid())
  orderId     String
  method      PaymentMethod
  amount      Float
  status      PaymentStatus @default(PENDING)
  externalId  String? // MPesa CheckoutRequestID, Bitcoin tx hash, etc.
  metadata    Json? // Store payment-specific data
  createdAt   DateTime      @default(now())
  completedAt DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  MANAGER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  PAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  MPESA
  BITCOIN
  LIGHTNING
  CASH_ON_DELIVERY
}
